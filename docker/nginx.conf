user  nginx;
#nginx进程数，建议设置为等于CPU总核心数。
worker_processes  auto;

error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;


events {
    # 理论上最大为65535连接数
    worker_connections  2048;
    #设置网路连接序列化，防止惊群现象发生，默认为on
    accept_mutex on;
    #设置一个进程是否同时接受多个网络连接，默认为off   
    multi_accept on;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #charset utf-8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile      on;    # 开启文件的高效传输模式
    tcp_nopush    on;    # 激活 TCP_CORK socket 选择
    tcp_nodelay   on;    # 数据在传输的过程中不进缓存

    keepalive_timeout  65;
    
    gzip  on;            # 压缩资源
    gzip_min_length  1k;         # 允许压缩的对象的最小字节
    gzip_buffers  4 32k;         # 压缩缓冲区大小，表示申请4个单位为32k的内存作为压缩结果的缓存
    gzip_http_version  1.1;      # 压缩版本，用于设置识别HTTP协议版本 默认也是1.1.
    gzip_comp_level  9;          # 压缩级别，1级压缩比最小但处理速度最快，9级压缩比最高但处理速度最慢
    gzip_types  text/html text/plain text/xml text/css text/javascript application/x-javascript application/javascript application/json;    # 允许压缩的媒体类型
    gzip_vary  on;               # 该选项可以让前端的缓存服务器缓存经过gzip压缩的页面，例如用代理服务器缓存经过Nginx压缩的数据

    # 这个是配置代理的引入，但是我们没必要酱紫
    # include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;

        # 支持https
        #ssl on;  
        #指定PEM格式的证书文件   
        # ssl_certificate      /etc/nginx/test.pem;   
        #指定PEM格式的私钥文件  
        # ssl_certificate_key  /etc/nginx/test.key;  
        root   /usr/share/nginx/html;
        index  /index.html index.htm;

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /wrong/url {
            return 404;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;

        location = /50x.html {
            root   /usr/share/nginx/html;
        }
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }
    }
}
